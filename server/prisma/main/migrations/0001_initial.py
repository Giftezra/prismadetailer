# Generated by Django 5.2.6 on 2025-09-21 17:23

import django.contrib.auth.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Addon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('description', models.JSONField(blank=True, default=dict, null=True)),
                ('duration', models.IntegerField(default=0)),
                ('price', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TermsAndConditions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=20, unique=True)),
                ('content', models.TextField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('phone', models.CharField(max_length=15, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('is_detailer', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('allow_marketing_emails', models.BooleanField(default=False)),
                ('allow_push_notifications', models.BooleanField(default=False)),
                ('allow_email_notifications', models.BooleanField(default=True)),
                ('notification_token', models.TextField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Detailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(blank=True, default=0, null=True)),
                ('address', models.CharField(blank=True, max_length=120, null=True)),
                ('city', models.CharField(blank=True, max_length=55, null=True)),
                ('post_code', models.CharField(blank=True, max_length=10, null=True)),
                ('country', models.CharField(blank=True, max_length=55, null=True)),
                ('commission_rate', models.DecimalField(decimal_places=4, default=0.2, max_digits=5)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_number', models.CharField(max_length=20)),
                ('account_name', models.CharField(max_length=100)),
                ('bank_name', models.CharField(max_length=100)),
                ('iban', models.CharField(max_length=55)),
                ('bic', models.CharField(max_length=55)),
                ('sort_code', models.CharField(max_length=55)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.detailer')),
            ],
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability', to='main.detailer')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_reference', models.CharField(max_length=120, unique=True)),
                ('client_name', models.CharField(max_length=120)),
                ('client_phone', models.CharField(max_length=15)),
                ('vehicle_registration', models.CharField(max_length=15)),
                ('vehicle_make', models.CharField(max_length=55)),
                ('vehicle_model', models.CharField(max_length=55)),
                ('vehicle_color', models.CharField(max_length=55)),
                ('vehicle_year', models.IntegerField(blank=True, null=True)),
                ('owner_note', models.TextField(blank=True, null=True)),
                ('address', models.CharField(max_length=120)),
                ('city', models.CharField(max_length=55)),
                ('post_code', models.CharField(max_length=10)),
                ('country', models.CharField(max_length=55)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('appointment_date', models.DateTimeField()),
                ('appointment_time', models.TimeField()),
                ('duration', models.IntegerField(blank=True, default=0, null=True)),
                ('valet_type', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=6, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('loyalty_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', max_length=20)),
                ('loyalty_benefits', models.JSONField(blank=True, default=list, null=True)),
                ('before_photo', models.ImageField(blank=True, null=True, upload_to='jobs/before/')),
                ('after_photo', models.ImageField(blank=True, null=True, upload_to='jobs/after/')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('addons', models.ManyToManyField(blank=True, to='main.addon')),
                ('detailer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='main.detailer')),
                ('service_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.servicetype')),
            ],
        ),
        migrations.CreateModel(
            name='Earning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gross_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('commission', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('net_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tip_amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('payout_date', models.DateField(blank=True, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings', to='main.detailer')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings', to='main.job')),
            ],
        ),
        migrations.CreateModel(
            name='JobChatRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('client_name', models.CharField(max_length=120)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_creation_time', models.DateTimeField(blank=True, null=True)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detailer_chat_rooms', to='main.detailer')),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat_room', to='main.job')),
            ],
            options={
                'unique_together': {('job', 'detailer')},
            },
        ),
        migrations.CreateModel(
            name='JobChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender_id', models.CharField(max_length=255)),
                ('sender_type', models.CharField(choices=[('client', 'Client'), ('detailer', 'Detailer')], max_length=20)),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('system', 'System'), ('status_update', 'Status Update')], default='text', max_length=20)),
                ('content', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='main.jobchatroom')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('type', models.CharField(choices=[('booking_confirmed', 'Booking Confirmed'), ('booking_cancelled', 'Booking Cancelled'), ('booking_rescheduled', 'Booking Rescheduled'), ('booking_created', 'Booking Created'), ('cleaning_completed', 'Cleaning Completed'), ('appointment_started', 'Appointment Started'), ('review_received', 'Review Received'), ('pending', 'Pending'), ('car_ready', 'Car Ready'), ('payment_received', 'Payment Received'), ('reminder', 'Reminder'), ('system', 'System')], default='pending', max_length=255)),
                ('status', models.CharField(choices=[('success', 'Success'), ('warning', 'Warning'), ('error', 'Error'), ('info', 'Info')], default='info', max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'password_reset_tokens',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.DecimalField(decimal_places=2, max_digits=3)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.detailer')),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.job')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('is_booked', models.BooleanField(default=False)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.detailer')),
            ],
            options={
                'ordering': ('date', 'start_time'),
            },
        ),
        migrations.CreateModel(
            name='TrainingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('date_completed', models.DateField(blank=True, null=True)),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.detailer')),
            ],
        ),
        migrations.CreateModel(
            name='PayoutHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payout_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payout_reference', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('payment_type', models.CharField(choices=[('request', 'Request'), ('scheduled', 'Scheduled')], default='scheduled', max_length=20)),
                ('initiated_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True, null=True)),
                ('external_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.bankaccount')),
                ('detailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_history', to='main.detailer')),
                ('earnings', models.ManyToManyField(related_name='payouts', to='main.earning')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['detailer', 'status', 'initiated_at'], name='main_payout_detaile_cbbe27_idx'), models.Index(fields=['payout_reference'], name='main_payout_payout__d9a088_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['detailer', 'status', 'appointment_date', 'appointment_time', 'booking_reference'], name='main_job_detaile_12dc2f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='timeslot',
            unique_together={('detailer', 'date', 'start_time', 'end_time')},
        ),
    ]
